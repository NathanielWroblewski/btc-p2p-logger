{
  "name": "btc-p2p",
  "version": "0.2.0",
  "description": "Manage a network of Bitcoin peers",
  "keywords": [
    "p2p",
    "network",
    "bitcoin",
    "peers",
    "cryptography"
  ],
  "main": "./lib/BTCNetwork.js",
  "dependencies": {
    "p2p-manager": "0.1.x",
    "sha256": "0.1.x"
  },
  "repository": {
    "url": "https://github.com/cryptocoinjs/btc-p2p",
    "type": "git"
  },
  "author": {
    "name": "Brooks Boyd",
    "email": "boydb@midnightdesign.ws"
  },
  "readme": "# Bitcoin P2P Manager\nManage a network of peers in a Bitcoin peer-to-peer network.\n\n## Events\nThe BTCNetwork object translates the raw network messages received from the PeerManager into parsed objects. Here's the differences between the various events (Events are identified like `Object::EventName`):\n\n* `Peer::message`: `{ peer: Peer, command: STRING, data: Buffer }` Raw message, fired for every message. Bubbled-up as `PeerManager::message`\n* `BTCNetwork::message`: `{ peer: Peer, command: STRING, data: { version: INT, services: Buffer, time: INT, ...}` Parsed data\n* `Peer::versionMessage`: `{ peer: Peer, data: Buffer }` Raw message. Bubbled-up by PeerManager as `PeerManager::versionMessage`\n* `BTCNetwork::versionMessage`: `{ peer: Peer, version: INT, services: Buffer, time: INT, ... }` Parsed data\n\nThis is accomplished by several message handlers on the BTCNetwork object, named in the format `parseCommandMessage` (e.g. `parseVersionMessage`, `parseInvMessage`, `parseGetaddrMessage`, etc.). If a handler is not found for a message type, the raw form is bubbled up. To handle additional types of messages, add a parser method named appropriately, and it will be passed `data` as an argument, which is the message payload in Buffer form. It must return an object; if the result is an array (i.e `inv` messages), return an object with one property set to the array (i.e. `{ items: ARRAY }`).\n\nIn addition to a parser method, a `handleCommandMessage` method can be defined, which will be passed the parsed result, and `peer` as arguments, where `peer` is the Peer who sent the message.\n\nThese parsing methods mean, that if you're subscribed to an event stream that presents raw data (i.e. the `versionMessage` events from an individual Peer), you can parse them like:\n\n```js\nvar p = new Peer('example.com');\nvar btc = new BTCNetwork();\n\np.on('versionMessage', function(d) {\n  var parsed = btc.parseVersionMessage(d.data);\n});\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cryptocoinjs/btc-p2p/issues"
  },
  "_id": "btc-p2p@0.2.0",
  "_from": "btc-p2p@"
}
